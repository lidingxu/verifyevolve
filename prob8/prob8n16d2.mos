model "Minimize ratio of pairwise distances"
  uses "mmxnlp"

  parameters
    n = 16       ! or 16
    d = 2        ! or 2
    limit = 100  ! Time limit
    debug = false
  end-parameters

  public declarations
    RN = 1..n
    RD = 1..d
    x: array(RN, RD) of mpvar    ! n points in d-dimensional space
    t_min, t_max: mpvar          ! Variables for min and max squared distances
    r: mpvar                     ! Ratio
    Obj: linctr
    DistLB,DistUB: dynamic array(RN,RN) of nlctr
  end-declarations


  ! Variable bounds
  forall(i in RN, j in RD) do
    x(i,j) >= 0
    x(i,j) <= 1
  end-do

  t_min >= 0
  t_max >= 0
  r >= 0

  ! Constraints on distances
  forall(i in 1..n-1, j in i+1..n) do
    DistLB(i,j):= sum(k in RD) (x(i,k) - x(j,k))^2 >= t_min
    DistUB(i,j):= sum(k in RD) (x(i,k) - x(j,k))^2 <= 1
  end-do

  ! Fix t_max
  t_max = 1
  ! Compute ratio
  r * t_min >= 1

  ! Objective: minimize the square root of ratio t_max / t_min
  Obj:= r

  if debug then
    setparam("XPRS_LOADNAMES", true)
    loadprob(Obj)
    writeprob("prob8n" + n + "d" + d + ".lp","l")
  end-if

  setparam("XPRS_MAXTIME", limit)
  setparam("XNLP_VERBOSE",true)
  ! Solve
  minimise(Obj)

  status:= getparam("XPRS_SOLSTATUS")
  if status in {XPRS_SOLSTATUS_FEASIBLE,XPRS_SOLSTATUS_OPTIMAL} then
    writeln("Objective value (ratio): ", getobjval)
    writeln("t_max: 1, t_min: ", t_min.sol)
    forall(i in RN, j in RD) writeln(x(i,j).name, ": ", x(i,j).sol)
  else
    writeln("No solution found with time limit of ", limit, " sec")
  end-if
end-model
